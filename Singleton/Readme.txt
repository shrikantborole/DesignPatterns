The singleton pattern is a creational pattern that ensures a class has only one instance and provides a global point of access to it. It is useful when there must be exactly one instance of a class and when that instance should be accessible from a well-known access point. The pattern allows the class to control how and when clients access the instance, and it can be extended through subclassing while maintaining compatibility with existing clients.

The consequences of using the singleton pattern include strict control over instance access, avoidance of global variables, runtime configuration with subclassed instances, and the ability to allow multiple instances if needed without altering client code. However, the pattern can violate the single responsibility principle as it combines instance creation and lifecycle management within the class itself. It's worth noting that in modern languages, such as those using an inversion of control (IOC) container, the responsibility of managing the lifetime of instances is often delegated to the container.

Overall, while the singleton pattern has its advantages and disadvantages, it serves as a foundational pattern and is commonly encountered in software development.